---
- block: # Prepare mariadb configuration
  - name: Copy .my.cnf to root user
    template:
      src: my.cnf.j2
      dest: "{{ mariadb_root_mycnf_filepath }}"
      owner: root
      group: root
      mode: 0400

  - name: Change bind address to listen all
    lineinfile:
      dest: "{{ mariadb_mycnf_path }}"
      regexp: '^bind-address'
      line: "bind-address = 0.0.0.0"
      insertafter: '^[mysqld]'
    notify: Restart MariaDB Service

  - meta: flush_handlers


- block: # Prepare master
  - name: Generate SSH keys on master
    shell: ssh-keygen -f "{{ mariadb_ssh_key_filepath }}" -q -N ""
    args:
      creates: "{{ mariadb_ssh_key_filepath }}"
    when: "'mariadb-master' in group_names"

  - name: Copy master public key to local machine
    fetch:
      src: "{{ mariadb_ssh_public_key_filepath }}"
      dest: "{{ mariadb_tmp_local_ssh_public_key_filepath }}"
      flat: yes
    when: "'mariadb-master' in group_names"

  - name: Create replication user
    mysql_user:
      name: "{{ mariadb_replicate_username }}"
      password: "{{ mariadb_replicate_password }}"
      host: "{{ mariadb_replicate_network | default('%') }}"
      state: "present"
      priv: "*.*:REPLICATION SLAVE"
    when: "'mariadb-master' in group_names"

  - name: Change to random server id on master
    lineinfile:
      dest: "{{ mariadb_mycnf_path }}"
      regexp: '^(server-id|#server-id)'
      line: "server-id = {{ 1000000 | random(start=100) }}"
      state: "present"
      insertbefore: '^[mysqld]'
    when: "'mariadb-master' in group_names"
    notify: Restart MariaDB Service

  - meta: flush_handlers


- block: # Prepare slave
  - name: Stop MariaDB service on slave
    service:
      name: "{{ mariadb_service_name }}"
      state: stopped
    when: "'mariadb-slave' in group_names"

  - name: Delete all file in {{ mariadb_data_path }} on slave (You can ignore error)
    file:
      path: "{{ mariadb_data_path }}"
      state: absent
    when: "'mariadb-slave' in group_names"
    ignore_errors: yes

  - name: Create {{ mariadb_data_path }} on slave
    file:
      path: "{{ mariadb_data_path }}"
      state: directory
    when: "'mariadb-slave' in group_names"

  - name: Copy master public key to slave
    authorized_key:
      user: root
      key: "{{ lookup('file', '{{ mariadb_tmp_local_ssh_public_key_filepath }}') }}"
      state: present
    when: "'mariadb-slave' in group_names"


- block: # Transfer data and configuration files

  - name: Copy file from master to slave
    shell: "innobackupex --user=root --password={{ mariadb_root_password }}
      --compress --compress-threads=8 --stream=xbstream --parallel=4 ./ |
      ssh -q -o StrictHostKeyChecking=no -o BatchMode=yes -o ConnectTimeout=3
      {{ hostvars[item]['ansible_host'] }}
      'xbstream -x -C {{ mariadb_data_path }}'"
    async: 3600
    poll: 0
    when: "'mariadb-master' in group_names"
    with_items: "{{ groups['mariadb-slave'] }}"
    register: mariadb_copy_to_slave

  - name: Check if copy is finish
    async_status:
      jid: "{{ mariadb_copy_to_slave['results'][0]['ansible_job_id'] }}"
    register: mariadb_copy_to_slave_result
    until: mariadb_copy_to_slave_result.finished
    retries: 720
    when: "'mariadb-master' in group_names"

  - name: Copy mysql configuration file from master to slave
    shell: "scp -r {{ mariadb_etc_path }}/*
      {{ hostvars[item]['ansible_host'] }}:{{ mariadb_etc_path }}/"
    when: "'mariadb-master' in group_names"
    with_items: "{{ groups['mariadb-slave'] }}"


- block: # Prepare data files
  - name: Decompress database files
    shell: "innobackupex --decompress {{ mariadb_data_path }}"
    async: 7200
    poll: 0
    when: "'mariadb-slave' in group_names"
    register: mariadb_slave_decompress

  - name: Check if decompress is finish
    async_status:
      jid: "{{ mariadb_slave_decompress['ansible_job_id'] }}"
    register: mariadb_slave_decompress_result
    until: mariadb_slave_decompress_result.finished
    retries: 1440
    when: "'mariadb-slave' in group_names"

  - name: Apply log database files
    shell: "innobackupex --apply-log --use-memory {{ mariadb_decompress_memory }}
      {{ mariadb_data_path }}"
    async: 3600
    poll: 0
    when: "'mariadb-slave' in group_names"
    register: mariadb_slave_apply_log

  - name: Check if apply log is finish
    async_status:
      jid: "{{ mariadb_slave_apply_log['ansible_job_id'] }}"
    register: mariadb_slave_apply_log_result
    until: mariadb_slave_apply_log_result.finished
    retries: 720
    when: "'mariadb-slave' in group_names"

  - name: Change owner on MariaDB data files
    file:
      path: "{{ mariadb_data_path }}"
      owner: "{{ mariadb_service_user }}"
      group: "{{ mariadb_service_group }}"
      recurse: yes
      state: directory
    when: "'mariadb-slave' in group_names"


- block: # Configure slave
  - name: Change to random server id on slave
    lineinfile:
      dest: "{{ mariadb_mycnf_path }}"
      regexp: '^server-id = .*'
      line: "server-id = {{ 1000000 | random(start=100) }}"
      insertafter: '^[mysqld]'
    when: "'mariadb-slave' in group_names"

  - name: Change innodb-buffer-pool-size
    lineinfile:
      dest: "{{ mariadb_mycnf_path }}"
      regexp: '^innodb-buffer-pool-size = .*'
      line: "innodb-buffer-pool-size = {{ mariadb_innodb_buffer_pool_size }}"
      insertafter: '^[mysqld]'
    when: "'mariadb-slave' in group_names and
      mariadb_innodb_buffer_pool_size is defined"

  - name: Start MariaDB server on slave
    service:
      name: "{{ mariadb_service_name }}"
      state: started
    when: "'mariadb-slave' in group_names"

  - name: Get master log filename
    shell: "cat {{ mariadb_data_path }}/xtrabackup_binlog_info | head -1 | awk '{print $1}'"
    when: "'mariadb-slave' in group_names"
    register: mariadb_master_log_filename

  - name: Get master log position
    shell: "cat {{ mariadb_data_path }}/xtrabackup_binlog_info | head -1 | awk '{print $2}'"
    when: "'mariadb-slave' in group_names"
    register: mariadb_master_log_position

  - name: Stop slave
    mysql_replication:
      mode: stopslave
      login_user: root
      login_password: "{{ mariadb_root_password }}"
    when: "'mariadb-slave' in group_names"

  - name: Configure slave to sync from master
    mysql_replication:
      mode: changemaster
      login_user: root
      login_password: "{{ mariadb_root_password }}"
      master_host: "{{ hostvars[item]['ansible_host'] }}"
      master_user: "{{ mariadb_replicate_username }}"
      master_password: "{{ mariadb_replicate_password }}"
      master_log_file: "{{ mariadb_master_log_filename.stdout }}"
      master_log_pos: "{{ mariadb_master_log_position.stdout }}"
    when: "'mariadb-slave' in group_names and mariadb_slave_replication"
    with_items: "{{ groups['mariadb-master'] }}"

  - name: Start slave
    mysql_replication:
      mode: startslave
      login_user: root
      login_password: "{{ mariadb_root_password }}"
    when: "'mariadb-slave' in group_names and mariadb_slave_replication"


- block: # Clean compress files
  - name: Delete all .qp compress files
    shell: "find {{ mariadb_data_path }} -name '*.qp' | xargs rm -rf"
    when: "'mariadb-slave' in group_names"
